@inject IConfiguration Configuration
@model List<dynamic>
@{
    ViewData["Title"] = "Qu·∫£n l√Ω Th∆∞∆°ng hi·ªáu";
}

<div class="container-fluid py-4">
    <div class="row mb-4">
        <div class="col">
            <h2><i class="bi bi-tag-fill"></i> Qu·∫£n l√Ω Th∆∞∆°ng hi·ªáu (Brands)</h2>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a asp-action="Dashboard">Dashboard</a></li>
                    <li class="breadcrumb-item active">Th∆∞∆°ng hi·ªáu</li>
                </ol>
            </nav>
        </div>
        <div class="col-auto">
            <a asp-action="CreateBrand" class="btn btn-primary">
                <i class="bi bi-plus-circle"></i> Th√™m Brand M·ªõi
            </a>
        </div>
    </div>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show">
            <i class="bi bi-check-circle"></i> @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show">
            <i class="bi bi-exclamation-triangle"></i> @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <div class="card shadow-sm">
        <div class="card-header bg-white">
            <div class="row align-items-center">
                <div class="col">
                    <h5 class="mb-0">Danh s√°ch Th∆∞∆°ng hi·ªáu</h5>
                </div>
                <div class="col-auto">
                    <input type="text" class="form-control" id="searchBrand" placeholder="üîç T√¨m ki·∫øm brand..." onkeyup="filterBrands()">
                </div>
            </div>
        </div>
        <div class="card-body">
            @if (Model != null && Model.Any())
            {
                <div class="table-responsive">
                    <table class="table table-hover" id="brandsTable">
                        <thead class="table-light">
                            <tr>
                                <th>#</th>
                                <th>T√™n Th∆∞∆°ng hi·ªáu</th>
                                <th class="text-center">S·ªë s·∫£n ph·∫©m</th>
                                <th class="text-center">T·ªïng t·ªìn kho</th>
                                <th class="text-center">Thao t√°c</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 0; i < Model.Count; i++)
                            {
                                var brand = Model[i];
                                <tr>
                                    <td>@(i + 1)</td>
                                    <td>
                                        <span class="badge bg-primary fs-6">@brand.name</span>
                                    </td>
                                    <td class="text-center">
                                        <span class="badge bg-info">@brand.count s·∫£n ph·∫©m</span>
                                    </td>
                                    <td class="text-center">
                                        <span class="badge bg-success">@brand.totalStock</span>
                                    </td>
                                    <td class="text-center">
                                        <div class="btn-group btn-group-sm">
                                            <a asp-action="BeveragesByBrand" asp-route-brand="@brand.name" 
                                               class="btn btn-outline-info" title="Xem s·∫£n ph·∫©m">
                                                <i class="bi bi-eye"></i>
                                            </a>
                                            <a asp-action="EditBrand" asp-route-brand="@brand.name" 
                                               class="btn btn-outline-warning" title="ƒê·ªïi t√™n">
                                                <i class="bi bi-pencil"></i>
                                            </a>
                                            <button class="btn btn-outline-danger" 
                                                    onclick="confirmDeleteBrand('@brand.name', @brand.count)" 
                                                    title="X√≥a brand">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <div class="mt-3">
                    <p class="text-muted">
                        <i class="bi bi-info-circle"></i> T·ªïng c·ªông: <strong>@Model.Count</strong> th∆∞∆°ng hi·ªáu
                    </p>
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <i class="bi bi-inbox display-1 text-muted"></i>
                    <p class="lead mt-3">Ch∆∞a c√≥ th∆∞∆°ng hi·ªáu n√†o</p>
                    <a asp-action="CreateBrand" class="btn btn-primary">
                        <i class="bi bi-plus-circle"></i> Th√™m Brand ƒê·∫ßu Ti√™n
                    </a>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
<script>
    const API_URL = '@Configuration["ApiSettings:BaseUrl"]';

    // Delete brand
    async function confirmDeleteBrand(brandName, count) {
        if (!confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a brand "${brandName}"?\n\nSau khi x√≥a, ${count} s·∫£n ph·∫©m s·∫Ω kh√¥ng c√≤n brand.`)) {
            return;
        }

        try {
            const response = await fetch(`${API_URL}/api/brands/${encodeURIComponent(brandName)}`, {
                method: 'DELETE'
            });

            if (response.ok) {
                location.reload();
            } else {
                const error = await response.json();
                alert('L·ªói: ' + (error.message || 'Kh√¥ng th·ªÉ x√≥a brand'));
            }
        } catch (error) {
            console.error('Error:', error);
            alert('C√≥ l·ªói x·∫£y ra!');
        }
    }

    // Filter brands
    function filterBrands() {
        const input = document.getElementById('searchBrand');
        const filter = input.value.toLowerCase();
        const table = document.getElementById('brandsTable');
        const rows = table.getElementsByTagName('tr');

        for (let i = 1; i < rows.length; i++) {
            const brandCell = rows[i].getElementsByTagName('td')[1];
            if (brandCell) {
                const brandText = brandCell.textContent || brandCell.innerText;
                rows[i].style.display = brandText.toLowerCase().indexOf(filter) > -1 ? '' : 'none';
            }
        }
    }
</script>
}
