<!-- Chat Widget -->
<div class="chat-widget" id="chatWidget">
    <div class="chat-header" onclick="toggleChat()">
        <div class="d-flex align-items-center">
            <i class="bi bi-chat-dots-fill me-2"></i>
            <span>Hỗ trợ khách hàng</span>
        </div>
        <div class="d-flex align-items-center gap-2">
            <span class="badge bg-success" id="adminStatus" style="display: none;">
                <i class="bi bi-circle-fill" style="font-size: 0.5rem;"></i> Online
            </span>
            <span class="badge bg-danger" id="newMessageBadge" style="display: none;">0</span>
            <i class="bi bi-chevron-down" id="chatToggleIcon"></i>
        </div>
    </div>
    
    <div class="chat-body" id="chatBody">
        <div class="chat-messages" id="chatMessages">
            <div class="text-center text-muted py-3">
                <i class="bi bi-chat-heart" style="font-size: 2rem;"></i>
                <p class="mb-0 mt-2">Xin chào! Chúng tôi có thể giúp gì cho bạn?</p>
            </div>
        </div>
        
        <div class="chat-input-container">
            <div id="typingIndicator" class="typing-indicator" style="display: none;">
                <span></span><span></span><span></span>
            </div>
            <div class="chat-input-wrapper">
                <input type="text" id="chatInput" class="form-control chat-input" 
                       placeholder="Nhập tin nhắn..." 
                       onkeypress="handleChatKeyPress(event)" />
                <button class="btn btn-primary btn-send" onclick="sendChatMessage()">
                    <i class="bi bi-send-fill"></i>
                </button>
            </div>
        </div>
    </div>
</div>

<style>
.chat-widget {
    position: fixed;
    bottom: 20px;
    right: 20px;
    width: 350px;
    max-width: calc(100vw - 40px);
    background: white;
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0,0,0,0.15);
    z-index: 1000;
    overflow: hidden;
}

.chat-header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 15px;
    cursor: pointer;
    display: flex;
    justify-content: space-between;
    align-items: center;
    user-select: none;
}

.chat-header:hover {
    background: linear-gradient(135deg, #5568d3 0%, #6a3f91 100%);
}

.chat-body {
    display: none;
    flex-direction: column;
    height: 400px;
    max-height: calc(100vh - 200px);
}

.chat-body.show {
    display: flex;
}

.chat-messages {
    flex: 1;
    overflow-y: auto;
    padding: 15px;
    background: #f8f9fa;
}

.chat-message {
    margin-bottom: 12px;
    animation: slideInMessage 0.3s ease-out;
}

@@keyframes slideInMessage {
    from {
        opacity: 0;
        transform: translateY(10px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.chat-message.user {
    text-align: right;
}

.chat-message.admin {
    text-align: left;
}

.message-bubble {
    display: inline-block;
    max-width: 80%;
    padding: 10px 14px;
    border-radius: 18px;
    word-wrap: break-word;
    position: relative;
}

.chat-message.user .message-bubble {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border-bottom-right-radius: 4px;
}

.chat-message.admin .message-bubble {
    background: white;
    color: #333;
    border-bottom-left-radius: 4px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.message-time {
    font-size: 0.7rem;
    opacity: 0.7;
    margin-top: 4px;
    display: block;
}

.typing-indicator {
    padding: 10px 15px;
    background: #e9ecef;
    border-radius: 8px;
    margin: 0 15px 10px;
    display: inline-block;
}

.typing-indicator span {
    height: 8px;
    width: 8px;
    background: #6c757d;
    display: inline-block;
    border-radius: 50%;
    margin: 0 2px;
    animation: typing 1.4s infinite;
}

.typing-indicator span:nth-child(2) {
    animation-delay: 0.2s;
}

.typing-indicator span:nth-child(3) {
    animation-delay: 0.4s;
}

@@keyframes typing {
    0%, 60%, 100% {
        transform: translateY(0);
    }
    30% {
        transform: translateY(-10px);
    }
}

.chat-input-container {
    border-top: 1px solid #dee2e6;
    background: white;
}

.chat-input-wrapper {
    display: flex;
    padding: 10px;
    gap: 8px;
}

.chat-input {
    flex: 1;
    border-radius: 20px;
    border: 1px solid #dee2e6;
    padding: 8px 15px;
}

.chat-input:focus {
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    border-color: #667eea;
}

.btn-send {
    border-radius: 50%;
    width: 40px;
    height: 40px;
    padding: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border: none;
}

.btn-send:hover {
    background: linear-gradient(135deg, #5568d3 0%, #6a3f91 100%);
    transform: scale(1.05);
}

/* Mobile responsive */
@@media (max-width: 576px) {
    .chat-widget {
        width: calc(100vw - 40px);
        right: 20px;
        bottom: 20px;
    }
    
    .chat-body {
        height: calc(100vh - 150px);
    }
}

/* Scrollbar styling */
.chat-messages::-webkit-scrollbar {
    width: 6px;
}

.chat-messages::-webkit-scrollbar-track {
    background: #f1f1f1;
}

.chat-messages::-webkit-scrollbar-thumb {
    background: #888;
    border-radius: 3px;
}

.chat-messages::-webkit-scrollbar-thumb:hover {
    background: #555;
}
</style>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>
<script>
    let chatConnection = null;
    let userName = 'Khách';
    let roomId = 'general';
    let isTyping = false;
    let typingTimeout = null;
    let unreadCount = 0;
    let isChatOpen = false;

    // Get user info from session
    @{
        var chatUserJson = Context.Session.GetString("CurrentUser");
        if (!string.IsNullOrEmpty(chatUserJson))
        {
            var chatUser = System.Text.Json.JsonSerializer.Deserialize<BeverageShop.MVC.Models.User>(chatUserJson);
            if (chatUser != null)
            {
                <text>
                userName = '@chatUser.FullName';
                roomId = 'user_@chatUser.Id';
                </text>
            }
        }
        else
        {
            <text>
            roomId = 'guest_' + Math.random().toString(36).substr(2, 9);
            </text>
        }
    }

    async function initializeChat() {
        try {
            chatConnection = new signalR.HubConnectionBuilder()
                .withUrl("http://localhost:5000/chathub")
                .withAutomaticReconnect()
                .build();

            chatConnection.on("ReceiveMessage", (user, message, timestamp) => {
                addMessage(user, message, timestamp, user !== userName);
                
                if (!isChatOpen) {
                    unreadCount++;
                    updateUnreadBadge();
                }
            });

            chatConnection.on("UserTyping", (user) => {
                if (user !== userName) {
                    showTypingIndicator();
                }
            });

            chatConnection.on("AdminOnline", () => {
                document.getElementById('adminStatus').style.display = 'inline-block';
            });

            chatConnection.on("AdminOffline", () => {
                document.getElementById('adminStatus').style.display = 'none';
            });

            await chatConnection.start();
            await chatConnection.invoke("JoinRoom", roomId, userName);
            
            console.log("Chat connected successfully");
        } catch (error) {
            console.error("Error initializing chat:", error);
            setTimeout(initializeChat, 5000); // Retry after 5 seconds
        }
    }

    function toggleChat() {
        const chatBody = document.getElementById('chatBody');
        const icon = document.getElementById('chatToggleIcon');
        
        chatBody.classList.toggle('show');
        isChatOpen = chatBody.classList.contains('show');
        
        if (isChatOpen) {
            icon.classList.remove('bi-chevron-down');
            icon.classList.add('bi-chevron-up');
            unreadCount = 0;
            updateUnreadBadge();
            document.getElementById('chatInput').focus();
        } else {
            icon.classList.add('bi-chevron-down');
            icon.classList.remove('bi-chevron-up');
        }
    }

    function addMessage(user, message, timestamp, isAdmin) {
        const messagesDiv = document.getElementById('chatMessages');
        const messageDiv = document.createElement('div');
        messageDiv.className = `chat-message ${isAdmin ? 'admin' : 'user'}`;
        
        const time = new Date(timestamp).toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' });
        
        messageDiv.innerHTML = `
            <div class="message-bubble">
                ${message}
                <span class="message-time">${time}</span>
            </div>
        `;
        
        messagesDiv.appendChild(messageDiv);
        messagesDiv.scrollTop = messagesDiv.scrollHeight;
        
        hideTypingIndicator();
    }

    async function sendChatMessage() {
        const input = document.getElementById('chatInput');
        const message = input.value.trim();
        
        if (!message || !chatConnection) return;
        
        try {
            await chatConnection.invoke("SendMessage", roomId, userName, message);
            input.value = '';
            
            // Add message to UI
            addMessage(userName, message, new Date().toISOString(), false);
        } catch (error) {
            console.error("Error sending message:", error);
            alert('Không thể gửi tin nhắn. Vui lòng thử lại.');
        }
    }

    function handleChatKeyPress(event) {
        if (event.key === 'Enter') {
            event.preventDefault();
            sendChatMessage();
        } else {
            // Notify typing
            if (!isTyping && chatConnection) {
                isTyping = true;
                chatConnection.invoke("UserTyping", roomId, userName).catch(console.error);
            }
            
            clearTimeout(typingTimeout);
            typingTimeout = setTimeout(() => {
                isTyping = false;
            }, 3000);
        }
    }

    function showTypingIndicator() {
        document.getElementById('typingIndicator').style.display = 'block';
        
        setTimeout(() => {
            hideTypingIndicator();
        }, 3000);
    }

    function hideTypingIndicator() {
        document.getElementById('typingIndicator').style.display = 'none';
    }

    function updateUnreadBadge() {
        const badge = document.getElementById('newMessageBadge');
        if (unreadCount > 0) {
            badge.textContent = unreadCount > 9 ? '9+' : unreadCount;
            badge.style.display = 'inline-block';
        } else {
            badge.style.display = 'none';
        }
    }

    // Initialize chat on page load
    document.addEventListener('DOMContentLoaded', () => {
        initializeChat();
    });

    // Cleanup on page unload
    window.addEventListener('beforeunload', async () => {
        if (chatConnection) {
            await chatConnection.invoke("LeaveRoom", roomId, userName);
            await chatConnection.stop();
        }
    });
</script>
