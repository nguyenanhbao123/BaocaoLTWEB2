@{
    ViewData["Title"] = "BeverageShop - C·ª≠a h√†ng ƒë·ªì u·ªëng ch√≠nh h√£ng";
    var userJson = Context.Session.GetString("CurrentUser");
    int? userId = null;
    if (!string.IsNullOrEmpty(userJson))
    {
        var user = System.Text.Json.JsonSerializer.Deserialize<BeverageShop.MVC.Models.User>(userJson);
        userId = user?.Id;
    }
}

<!-- Top Banner -->
<div class="top-banner py-2 text-center" style="background: linear-gradient(135deg, #d63031 0%, #e17055 100%); color: white;">
    <div class="d-flex justify-content-center align-items-center gap-4 flex-wrap">
        <span><i class="bi bi-truck"></i> Mi·ªÖn ph√≠ giao h√†ng ƒë∆°n t·ª´ 300K</span>
        <span><i class="bi bi-shield-check"></i> Ch√≠nh h√£ng 100%</span>
        <span><i class="bi bi-headset"></i> Hotline: 1800.2097</span>
    </div>
</div>

<!-- Main Hero Slider -->
<div id="heroCarousel" class="carousel slide mb-4" data-bs-ride="carousel">
    <div class="carousel-indicators">
        <button type="button" data-bs-target="#heroCarousel" data-bs-slide-to="0" class="active"></button>
        <button type="button" data-bs-target="#heroCarousel" data-bs-slide-to="1"></button>
        <button type="button" data-bs-target="#heroCarousel" data-bs-slide-to="2"></button>
    </div>
    <div class="carousel-inner rounded-3 shadow">
        <div class="carousel-item active">
            <div class="hero-slide" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 400px; display: flex; align-items: center;">
                <div class="container text-white text-center">
                    <h1 class="display-4 fw-bold mb-3">üçπ KHAI TR∆Ø∆†NG M√ôA H√à</h1>
                    <p class="lead mb-4">Gi·∫£m gi√° l√™n ƒë·∫øn 50% - Freeship to√†n qu·ªëc</p>
                    <a href="/Shop/Index" class="btn btn-light btn-lg px-5">Mua Ngay</a>
                </div>
            </div>
        </div>
        <div class="carousel-item">
            <div class="hero-slide" style="background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); min-height: 400px; display: flex; align-items: center;">
                <div class="container text-white text-center">
                    <h1 class="display-4 fw-bold mb-3">‚òï CAFE CAO C·∫§P</h1>
                    <p class="lead mb-4">Nh·∫≠p kh·∫©u tr·ª±c ti·∫øp - ∆Øu ƒë√£i ƒë·∫øn 50%</p>
                    <a asp-controller="Shop" asp-action="Index" asp-route-category="C√† ph√™" class="btn btn-light btn-lg px-5">Kh√°m Ph√°</a>
                </div>
            </div>
        </div>
        <div class="carousel-item">
            <div class="hero-slide" style="background: linear-gradient(135deg, #fa709a 0%, #fee140 100%); min-height: 400px; display: flex; align-items: center;">
                <div class="container text-white text-center">
                    <h1 class="display-4 fw-bold mb-3">ü•§ TR√Ä S·ªÆA ƒê·∫∂C BI·ªÜT</h1>
                    <p class="lead mb-4">Mua 1 t·∫∑ng 1 - Mi·ªÖn ph√≠ ship</p>
                    <a href="/Shop/Index?category=Tr√†" class="btn btn-light btn-lg px-5">ƒê·∫∑t Ngay</a>
                </div>
            </div>
        </div>
    </div>
    <button class="carousel-control-prev" type="button" data-bs-target="#heroCarousel" data-bs-slide="prev">
        <span class="carousel-control-prev-icon"></span>
    </button>
    <button class="carousel-control-next" type="button" data-bs-target="#heroCarousel" data-bs-slide="next">
        <span class="carousel-control-next-icon"></span>
    </button>
</div>

<!-- Quick Promo Banners -->
<div class="row g-3 mb-5">
    <div class="col-md-4">
        <div class="promo-card p-4 rounded-3 text-white" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); cursor: pointer;">
            <h5 class="fw-bold">üéÅ QU√Ä T·∫∂NG MI·ªÑN PH√ç</h5>
            <p class="mb-0 small">Cho ƒë∆°n h√†ng ƒë·∫ßu ti√™n</p>
        </div>
    </div>
    <div class="col-md-4">
        <div class="promo-card p-4 rounded-3 text-white" style="background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); cursor: pointer;">
            <h5 class="fw-bold">‚ö° FLASH SALE</h5>
            <p class="mb-0 small">Gi·∫£m ngay 500K</p>
        </div>
    </div>
    <div class="col-md-4">
        <div class="promo-card p-4 rounded-3 text-white" style="background: linear-gradient(135deg, #fa709a 0%, #fee140 100%); cursor: pointer;">
            <h5 class="fw-bold">üí≥ TR·∫¢ G√ìP 0%</h5>
            <p class="mb-0 small">L√£i su·∫•t 0% - Duy·ªát nhanh</p>
        </div>
    </div>
</div>

<!-- Product Categories Section -->
<section class="category-section mb-5">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="fw-bold mb-0">‚òï C√Ä PH√ä & ESPRESSO</h2>
        <a asp-controller="Shop" asp-action="Index" asp-route-category="C√† ph√™" class="btn btn-outline-primary">Xem t·∫•t c·∫£</a>
    </div>
    
    <!-- Brand Filter -->
    <div class="brand-filter mb-3 d-flex gap-2 flex-wrap">
        <a href="/Shop/Index?brand=Trung Nguy√™n" class="badge bg-light text-dark px-3 py-2">Trung Nguy√™n</a>
        <a href="/Shop/Index?brand=Highlands" class="badge bg-light text-dark px-3 py-2">Highlands</a>
        <a href="/Shop/Index?brand=Nescafe" class="badge bg-light text-dark px-3 py-2">Nescafe</a>
        <a href="/Shop/Index?brand=Lavazza" class="badge bg-light text-dark px-3 py-2">Lavazza</a>
        <a href="/Shop/Index?brand=Starbucks" class="badge bg-light text-dark px-3 py-2">Starbucks</a>
    </div>
    
    <div class="row g-3">
        @if (ViewBag.CoffeeBeverages != null && ViewBag.CoffeeBeverages.Count > 0)
        {
            foreach (var beverage in ViewBag.CoffeeBeverages)
            {
                <div class="col-6 col-md-3 col-lg-2">
                    <div class="product-card card h-100 border-0 shadow-sm position-relative">
                        <img src="@(!string.IsNullOrEmpty(beverage.ImageUrl) ? beverage.ImageUrl : "https://via.placeholder.com/200x200?text=No+Image")" 
                             class="card-img-top" 
                             alt="@beverage.Name"
                             loading="lazy"
                             style="height: 200px; object-fit: cover;">
                        @if (!string.IsNullOrEmpty(beverage.Brand))
                        {
                            <span class="badge bg-primary position-absolute top-0 start-0 m-2">@beverage.Brand</span>
                        }

                        @if (userId.HasValue)
                        {
                            <button class="btn btn-sm btn-wishlist position-absolute top-0 end-0 m-2" onclick="toggleWishlist(@beverage.Id, this)" data-beverage-id="@beverage.Id" title="Th√™m v√†o y√™u th√≠ch">
                                <i class="bi bi-heart"></i>
                            </button>
                        }

                        <div class="card-body p-2">
                            <h6 class="card-title small fw-bold mb-1" style="min-height: 2.4em; overflow: hidden; text-overflow: ellipsis; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical;">@beverage.Name</h6>
                            <p class="text-danger fw-bold mb-0">@beverage.Price.ToString("N0")ƒë</p>
                            <p class="text-muted small mb-1">&nbsp;</p>
                            <div class="d-flex gap-1">
                                <i class="bi bi-star-fill text-warning small"></i>
                                <i class="bi bi-star-fill text-warning small"></i>
                                <i class="bi bi-star-fill text-warning small"></i>
                                <i class="bi bi-star-fill text-warning small"></i>
                                <i class="bi bi-star text-warning small"></i>
                            </div>
                        </div>
                        <a href="/Shop/Details/@beverage.Id" class="stretched-link" aria-label="Chi ti·∫øt @beverage.Name"></a>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col-12">
                <p class="text-center text-muted">Ch∆∞a c√≥ s·∫£n ph·∫©m trong danh m·ª•c n√†y</p>
            </div>
        }
    </div>
</section>

<!-- Accessories Banner -->
<div class="row g-3 mb-5">
    <div class="col-md-12">
        <div class="accessory-banner p-5 rounded-3 text-center" style="background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%); color: white;">
            <h3 class="fw-bold mb-3">üéÅ PH·ª§ KI·ªÜN TR√Ä - CAFE CH·∫§T L∆Ø·ª¢NG</h3>
            <p class="mb-3">Ly, ·ªëng h√∫t, m√°y pha - Gi·∫£m gi√° ƒë·∫øn 40%</p>
            <a href="/Shop/Index?category=Ph·ª• ki·ªán" class="btn btn-light btn-lg">Xem t·∫•t c·∫£</a>
        </div>
    </div>
</div>

<!-- Tea Category -->
<section class="category-section mb-5">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="fw-bold mb-0">üçµ TR√Ä & TR√Ä S·ªÆA</h2>
        <a href="/Shop/Index?category=Tr√†" class="btn btn-outline-primary">Xem t·∫•t c·∫£</a>
    </div>
    
    <div class="brand-filter mb-3 d-flex gap-2 flex-wrap">
        <a href="/Shop/Index?brand=Lipton" class="badge bg-light text-dark px-3 py-2">Lipton</a>
        <a href="/Shop/Index?brand=Cozy" class="badge bg-light text-dark px-3 py-2">Cozy</a>
        <a href="/Shop/Index?brand=Dilmah" class="badge bg-light text-dark px-3 py-2">Dilmah</a>
        <a href="/Shop/Index?brand=Ph√∫c Long" class="badge bg-light text-dark px-3 py-2">Ph√∫c Long</a>
        <a href="/Shop/Index?brand=Tr√† Vi·ªát" class="badge bg-light text-dark px-3 py-2">Tr√† Vi·ªát</a>
    </div>
    
    <div class="row g-3">
        @if (ViewBag.TeaBeverages != null && ViewBag.TeaBeverages.Count > 0)
        {
            foreach (var beverage in ViewBag.TeaBeverages)
            {
                <div class="col-6 col-md-3 col-lg-2">
                    <div class="product-card card h-100 border-0 shadow-sm position-relative">
                        <img src="@(!string.IsNullOrEmpty(beverage.ImageUrl) ? beverage.ImageUrl : "https://via.placeholder.com/200x200?text=No+Image")" 
                             class="card-img-top" 
                             alt="@beverage.Name"
                             loading="lazy"
                             style="height: 200px; object-fit: cover;">
                        @if (!string.IsNullOrEmpty(beverage.Brand))
                        {
                            <span class="badge bg-success position-absolute top-0 start-0 m-2">@beverage.Brand</span>
                        }

                        @if (userId.HasValue)
                        {
                            <button class="btn btn-sm btn-wishlist position-absolute top-0 end-0 m-2" onclick="toggleWishlist(@beverage.Id, this)" data-beverage-id="@beverage.Id" title="Th√™m v√†o y√™u th√≠ch">
                                <i class="bi bi-heart"></i>
                            </button>
                        }

                        <div class="card-body p-2">
                            <h6 class="card-title small fw-bold mb-1" style="min-height: 2.4em; overflow: hidden; text-overflow: ellipsis; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical;">@beverage.Name</h6>
                            <p class="text-danger fw-bold mb-0">@beverage.Price.ToString("N0")ƒë</p>
                            <p class="text-muted small mb-1">&nbsp;</p>
                            <div class="d-flex gap-1">
                                <i class="bi bi-star-fill text-warning small"></i>
                                <i class="bi bi-star-fill text-warning small"></i>
                                <i class="bi bi-star-fill text-warning small"></i>
                                <i class="bi bi-star-fill text-warning small"></i>
                                <i class="bi bi-star text-warning small"></i>
                            </div>
                        </div>
                        <a href="/Shop/Details/@beverage.Id" class="stretched-link" aria-label="Chi ti·∫øt @beverage.Name"></a>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col-12">
                <p class="text-center text-muted">Ch∆∞a c√≥ s·∫£n ph·∫©m trong danh m·ª•c n√†y</p>
            </div>
        }
    </div>
</section>

<!-- Juice & Smoothie Category -->
<section class="category-section mb-5">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="fw-bold mb-0">ü•§ N∆Ø·ªöC √âP & SINH T·ªê</h2>
        <a href="/Shop/Index?category=N∆∞·ªõc √©p" class="btn btn-outline-primary">Xem t·∫•t c·∫£</a>
    </div>
    
    <div class="brand-filter mb-3 d-flex gap-2 flex-wrap">
        <a href="/Shop/Index?brand=Fresh Juice" class="badge bg-light text-dark px-3 py-2">Fresh Juice</a>
        <a href="/Shop/Index?brand=Smoothie House" class="badge bg-light text-dark px-3 py-2">Smoothie House</a>
        <a href="/Shop/Index?brand=Tropicana" class="badge bg-light text-dark px-3 py-2">Tropicana</a>
        <a href="/Shop/Index?brand=Minute Maid" class="badge bg-light text-dark px-3 py-2">Minute Maid</a>
    </div>
    
    <div class="row g-3">
        @if (ViewBag.JuiceBeverages != null && ViewBag.JuiceBeverages.Count > 0)
        {
            foreach (var beverage in ViewBag.JuiceBeverages)
            {
                <div class="col-6 col-md-3 col-lg-2">
                    <div class="product-card card h-100 border-0 shadow-sm position-relative">
                        <img src="@(!string.IsNullOrEmpty(beverage.ImageUrl) ? beverage.ImageUrl : "https://via.placeholder.com/200x200?text=No+Image")" 
                             class="card-img-top" 
                             alt="@beverage.Name"
                             loading="lazy"
                             style="height: 200px; object-fit: cover;">
                        @if (!string.IsNullOrEmpty(beverage.Brand))
                        {
                            <span class="badge bg-info position-absolute top-0 start-0 m-2">@beverage.Brand</span>
                        }

                        @if (userId.HasValue)
                        {
                            <button class="btn btn-sm btn-wishlist position-absolute top-0 end-0 m-2" onclick="toggleWishlist(@beverage.Id, this)" data-beverage-id="@beverage.Id" title="Th√™m v√†o y√™u th√≠ch">
                                <i class="bi bi-heart"></i>
                            </button>
                        }

                        <div class="card-body p-2">
                            <h6 class="card-title small fw-bold mb-1" style="min-height: 2.4em; overflow: hidden; text-overflow: ellipsis; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical;">@beverage.Name</h6>
                            <p class="text-danger fw-bold mb-0">@beverage.Price.ToString("N0")ƒë</p>
                            <p class="text-muted small mb-1">&nbsp;</p>
                            <div class="d-flex gap-1">
                                <i class="bi bi-star-fill text-warning small"></i>
                                <i class="bi bi-star-fill text-warning small"></i>
                                <i class="bi bi-star-fill text-warning small"></i>
                                <i class="bi bi-star-fill text-warning small"></i>
                                <i class="bi bi-star-half text-warning small"></i>
                            </div>
                        </div>
                        <a href="/Shop/Details/@beverage.Id" class="stretched-link" aria-label="Chi ti·∫øt @beverage.Name"></a>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col-12">
                <p class="text-center text-muted">Ch∆∞a c√≥ s·∫£n ph·∫©m trong danh m·ª•c n√†y</p>
            </div>
        }
    </div>
</section>

<!-- Features Section -->
<div class="row g-4 mb-5">
    <div class="col-md-3 col-6">
        <div class="feature-card text-center p-4 border rounded-3">
            <div class="mb-3" style="font-size: 3rem;">üöö</div>
            <h6 class="fw-bold">Giao h√†ng mi·ªÖn ph√≠</h6>
            <p class="text-muted small mb-0">Cho ƒë∆°n t·ª´ 300K</p>
        </div>
    </div>
    <div class="col-md-3 col-6">
        <div class="feature-card text-center p-4 border rounded-3">
            <div class="mb-3" style="font-size: 3rem;">‚úÖ</div>
            <h6 class="fw-bold">S·∫£n ph·∫©m ch√≠nh h√£ng</h6>
            <p class="text-muted small mb-0">Xu·∫•t VAT ƒë·∫ßy ƒë·ªß</p>
        </div>
    </div>
    <div class="col-md-3 col-6">
        <div class="feature-card text-center p-4 border rounded-3">
            <div class="mb-3" style="font-size: 3rem;">üí∞</div>
            <h6 class="fw-bold">Gi√° t·ªët nh·∫•t</h6>
            <p class="text-muted small mb-0">Ho√†n ti·ªÅn n·∫øu r·∫ª h∆°n</p>
        </div>
    </div>
    <div class="col-md-3 col-6">
        <div class="feature-card text-center p-4 border rounded-3">
            <div class="mb-3" style="font-size: 3rem;">üìû</div>
            <h6 class="fw-bold">Hotline 1800.2097</h6>
            <p class="text-muted small mb-0">H·ªó tr·ª£ 7:30 - 22:00</p>
        </div>
    </div>
</div>

@section Scripts {
<script>
    const API_URL = 'https://localhost:7000';
    const userId = @(userId.HasValue ? userId.Value.ToString() : "null");

    document.addEventListener('DOMContentLoaded', async () => {
        if (userId) {
            await loadWishlistStatus();
        }
    });

    async function loadWishlistStatus() {
        try {
            console.log('Loading wishlist status for user', userId);
            const response = await fetch(`${API_URL}/api/wishlist/user/${userId}`);
            console.log('Wishlist status response:', response.status, response.statusText);
            if (response.ok) {
                const wishlist = await response.json();
                console.log('Wishlist items:', wishlist);
                wishlist.forEach(item => {
                    const id = item.beverageId ?? (item.beverage ? item.beverage.id : null);
                    if (!id) return;
                    const btn = document.querySelector(`[data-beverage-id="${id}"]`);
                    if (btn) {
                        btn.classList.add('active');
                        const icon = btn.querySelector('i');
                        if (icon) {
                            icon.classList.remove('bi-heart');
                            icon.classList.add('bi-heart-fill');
                        }
                    }
                });
            } else {
                const text = await response.text();
                console.error('Failed to load wishlist status. Response body:', text);
            }
        } catch (error) {
            console.error('Error loading wishlist status:', error);
        }
    }

    async function toggleWishlist(beverageId, button) {
        if (!userId) {
            alert('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng wishlist!');
            window.location.href = '/Account/Login';
            return;
        }

        const isActive = button.classList.contains('active');
        const icon = button.querySelector('i');

        try {
            if (isActive) {
                // Try API DELETE
                const response = await fetch(`${API_URL}/api/wishlist/user/${userId}/beverage/${beverageId}`, { method: 'DELETE' });
                if (response.ok) {
                    button.classList.remove('active');
                    if (icon) { icon.classList.remove('bi-heart-fill'); icon.classList.add('bi-heart'); }
                    showToast('ƒê√£ x√≥a kh·ªèi y√™u th√≠ch');
                    return;
                }

                // Fallback: call MVC action RemoveFromWishlist via form (if available)
                console.warn('API DELETE failed, using fallback form submit');
                submitRemoveWishlistFallback(beverageId, button);
            } else {
                // Try API POST
                const response = await fetch(`${API_URL}/api/wishlist`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ userId, beverageId })
                });
                if (response.ok) {
                    const created = await response.json();
                    button.classList.add('active');
                    if (icon) { icon.classList.remove('bi-heart'); icon.classList.add('bi-heart-fill'); }
                    showToast('ƒê√£ th√™m v√†o y√™u th√≠ch!');
                    return;
                }

                // Fallback: submit to MVC Shop/AddToWishlist
                console.warn('API POST failed, using fallback form submit');
                submitAddWishlistFallback(beverageId, button);
            }
        } catch (error) {
            console.error('Error toggling wishlist:', error);
            // Fallback to server-side form submit
            if (!isActive) submitAddWishlistFallback(beverageId, button);
            else submitRemoveWishlistFallback(beverageId, button);
        }
    }

    function submitAddWishlistFallback(beverageId, button) {
        // Create a temporary form that posts to /Shop/AddToWishlist
        const form = document.createElement('form');
        form.method = 'post';
        form.action = '/Shop/AddToWishlist';

        const bevInput = document.createElement('input');
        bevInput.type = 'hidden';
        bevInput.name = 'beverageId';
        bevInput.value = beverageId;
        form.appendChild(bevInput);

        document.body.appendChild(form);
        form.submit();
    }

    function submitRemoveWishlistFallback(beverageId, button) {
        // If we had wishlistId stored as data attribute, we could post it. Use user+beverage route via form GET redirect.
        window.location.href = `/Shop/RemoveFromWishlist?wishlistId=0`; // unreachable fallback - prefer server API
    }

    function showToast(message, type = 'success') {
        const toast = document.createElement('div');
        toast.className = `alert alert-${type === 'error' ? 'danger' : type === 'warning' ? 'warning' : 'success'} position-fixed top-0 end-0 m-3`;
        toast.style.zIndex = '9999';
        toast.innerHTML = message;
        document.body.appendChild(toast);
        setTimeout(() => toast.remove(), 3000);
    }
</script>
}

<style>
    .promo-card {
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    .promo-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 30px rgba(0,0,0,0.2);
    }
    .product-card {
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        cursor: pointer;
        z-index: 1; /* ensure product cards are behind header */
    }
    .product-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 30px rgba(0,0,0,0.15) !important;
    }
    .brand-filter a {
        text-decoration: none;
        transition: all 0.3s ease;
    }
    .brand-filter a:hover {
        background-color: #0d6efd !important;
        color: white !important;
    }
    .feature-card {
        transition: all 0.3s ease;
    }
    .feature-card:hover {
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        transform: translateY(-3px);
    }
</style>
